##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'H2 Database less than 2.0.202 - JNI Code Execution',
        'Description' => %q{
          H2 allows users to gain code execution by compiling and running Java code.
          However this requires the Java Compiler to be available on the machine running
          H2. This exploit utilises the Java Native Interface to load a a Java class
          without needing to use the Java Compiler.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Markus Wulftange',   # Original discovery, PoC, and blog
          '1F98D',              # ExploitDB author
          'Ismail E. Dawoodjee' # Metasploit module author
        ],
        'References' => [
          [ 'EDB', '49384' ],
          [ 'URL', 'https://codewhitesec.blogspot.com/2019/08/exploit-h2-database-native-libraries-jni.html']
        ],
        'Platform' => 'win',
        'Targets' => [
          [
            'Windows Command',
            { 'DefaultOptions' => { 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' } }
          ],
        ],
        'Privileged' => false,
        'DisclosureDate' => '2020-04-28',
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]
        }
      )
    )
    register_options(
      [
        Opt::RPORT(8082, true, 'H2 Database Console web interface default port'),
        OptString.new('TARGETURI', [ true, 'Base path of the H2 web interface', '/']),
        OptString.new('USERNAME', [ true, 'Username to login with', 'sa']),
        OptString.new('PASSWORD', [ true, 'Password to login with', '']),
        OptString.new('DATABASE', [ true, 'Database to use', 'jdbc:h2:mem:']),
      ]
    )
  end

  def check
    uri = normalize_uri(target_uri.path, 'login.jsp')
    vprint_status("Checking target web server for a response at: #{full_uri(uri)}")
    res = send_request_cgi(
      'method' => 'GET',
      'uri' => uri
    )

    unless res
      return CheckCode::Unknown('Target did not respond to check request.')
    end

    unless res.code == 200 &&
           res.body.downcase.include?('h2 console') &&
           res.body.downcase.include?('h2 group') &&
           res.body.downcase.include?('jsessionid')
      return CheckCode::Unknown('Target is not running H2 Database Console.')
    end

    vprint_good('Target is running H2 Database Console.')

    vprint_status('Obtaining jessionid...')
    if res.body =~ /location.href = 'login\.jsp\?jsessionid=(\w+)';/
      jsessionid = Regexp.last_match(1)
      vprint_good("Successfully obtained jsessionid: #{jsessionid}")
    else
      return CheckCode::Detected(
        'Failed to obtain jsessionid. ' \
        'H2 Database version cannot be determined'
      )
    end

    login_uri = normalize_uri(target_uri.path, 'login.do')
    vprint_status(
      "Logging into H2 Database Console at: #{full_uri(uri)}, " \
      "into database '#{datastore['DATABASE']}', " \
      "using credentials '#{datastore['USERNAME']}:#{datastore['PASSWORD']}'"
    )
    login_res = send_request_cgi({
      'method' => 'POST',
      'uri' => login_uri,
      'ctype' => 'application/x-www-form-urlencoded',
      'vars_get' => { 'jsessionid' => jsessionid },
      'vars_post' => {
        'language' => 'en',
        'setting' => 'Generic H2 (Embedded)',
        'name' => 'Generic H2 (Embedded)',
        'driver' => 'org.h2.Driver',
        'url' => datastore['DATABASE'],
        'user' => datastore['USERNAME'],
        'password' => datastore['PASSWORD']
      }
    })

    unless login_res &&
           login_res.code == 200 &&
           login_res.body.include?('Sorry, Lynx not supported yet')
      return CheckCode::Detected(
        'Failed to log in. ' \
        'H2 Database version cannot be determined'
      )
    end

    vprint_good('Successfully logged in.')

    vprint_status('Checking H2 Database version...')
    sql_query = 'SELECT H2VERSION();'
    query_uri = normalize_uri(target_uri.path, 'query.do')
    query_res = send_request_cgi({
      'method' => 'POST',
      'uri' => query_uri,
      'ctype' => 'application/x-www-form-urlencoded',
      'vars_get' => { 'jsessionid' => jsessionid },
      'vars_post' => { 'sql' => sql_query }
    })

    if query_res.body =~ %r{<td>([\d.]+)</td>}
      version_number = Regexp.last_match(1)
    else
      return CheckCode::Detected('H2 Database version cannot be determined.')
    end

    unless Rex::Version.new(version_number) < Rex::Version.new('2.0.202')
      return CheckCode::Safe("Running H2 Database version #{version_number}.")
    end

    return CheckCode::Appears("Running H2 Database version #{version_number}.")
  end

  def exploit
    # Main function
  end

end
